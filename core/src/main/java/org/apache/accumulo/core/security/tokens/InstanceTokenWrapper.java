/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.accumulo.core.security.tokens;

import org.apache.accumulo.core.client.AccumuloSecurityException;
import org.apache.accumulo.core.security.thrift.ThriftInstanceTokenWrapper;
import org.apache.log4j.Logger;

public class InstanceTokenWrapper {
  private SecurityToken token; // required
  private String instance; // required
  private ThriftInstanceTokenWrapper tikw = null;
  Logger log = Logger.getLogger(InstanceTokenWrapper.class);
  
  public InstanceTokenWrapper(SecurityToken token, String instance) {
    this.token = token;
    this.instance = instance;
  }
  
  public InstanceTokenWrapper(ThriftInstanceTokenWrapper credentials) throws AccumuloSecurityException {
    this.token = TokenHelper.unwrap(credentials.token);
    this.instance = credentials.instance;
  }
  
  public String getInstance() {
    return this.instance;
  }
  
  public InstanceTokenWrapper setInstance(String instance) {
    this.instance = instance;
    tikw = null;
    return this;
  }
  
  public SecurityToken getToken() {
    return this.token;
  }
  
  public InstanceTokenWrapper setToken(SecurityToken token) {
    this.token = token;
    tikw = null;
    return this;
  }
  
  public ThriftInstanceTokenWrapper toThrift() throws AccumuloSecurityException {
    if (tikw == null)
      tikw = new ThriftInstanceTokenWrapper(TokenHelper.wrapper(token), token.getClass().getName(), instance);
    return tikw;
  }
  
  public String getPrincipal() {
    return token.getPrincipal();
  }
  
  public String toString() {
    return getPrincipal() + "[" + this.instance + "]-> " + token;
  }
  
  public boolean equals(Object obj) {
    if (!(obj instanceof InstanceTokenWrapper))
      return false;
    InstanceTokenWrapper itw = (InstanceTokenWrapper) obj;
    return this.instance.equals(itw.instance) && this.token.equals(itw.token);
  }
}
