<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type='text/javascript'>
// observable stats that can be connected to motion or color
var statName = ['osload','ingest','query'];
var speedStatType = 1; // index into statName
var colorStatType = 0; // index into statName
var maxStatValue = [numCores, 1000, 10000]; // initial values that are system-dependent will increase based on observed values
var significance = [100,1,1]; // values will be converted by floor(this*value)/this
var maxObservedSpeed = maxStatValue[speedStatType];
var maxObservedColor = maxStatValue[colorStatType];

// size and spacing variables
var numDots = 0; // number of dots to draw
var dotSpacing = 10; // spacing between centers of dots (radius)
var dotPadding = 0.5; // dot padding
var minDotRadius = 3; // min dot radius
var maxDotRadius = dotSpacing - dotPadding;

// arrays of information about each dot
var dotSize = new Array(numDots); // current sizes
var dotSizeGrowing = new Array(numDots); // true when dot size is growing, false when shrinking
var ids = new Array(numDots); // server ids
var extras = new Array(numDots); // info from which color and motion is derived
var mousedDot = 0; // the dot currently under the mouse

var speed = new Array(numDots); // between 0 (motionless) and maxObservedSpeed (fastest)
var colors = new Array(numDots); // dot colors between 0 and maxObservedColor, -1 for dead node
var colorPalette = ['#0000CC', '#0014B8', '#0029A3', '#003D8F', '#00527A', '#006666', '#007A52', '#008F3D', '#00A329', '#00B814', '#00CC00', '#14D100', '#29D600', '#3DDB00', '#52E000', '#66E600', '#7AEB00', '#8FF000', '#A3F500', '#B8FA00', '#CCFF00', '#CCFF00', '#CCF200', '#CCE600', '#CCD900', '#CCCC00', '#CCBF00', '#CCB200', '#CCA600', '#CC9900', '#CC8C00', '#CC8000', '#CC7300', '#CC6600', '#CC5900', '#CC4C00', '#CC4000', '#CC3300', '#CC2600', '#CC1A00', '#CC0D00', '#CC0000'];

var nullColor = '#F5F8FA';
var deadColor = '#B000CC';

// animation variables
var frame = 0;
var canvas = document.getElementById('visCanvas');
var context = canvas.getContext('2d');

// mouse handling for server information display
canvas.addEventListener('mouseover', showId, false);
canvas.addEventListener('mousemove', showId, false);
canvas.addEventListener('mouseout', hideId, false);
canvas.addEventListener('click', goToServer, false);

// initialize settings based on request parameters
var main = document.getElementById('main');
var useCircles = true;
setShape(document.getElementById('shape'));
setSize(document.getElementById('size'));
setMotion(document.getElementById('motion'));

// xml loading variables
var xmlReturned = true;
var xmlhttp=new XMLHttpRequest(); // don't bother allowing for IE 5 or 6 since canvas won't work
xmlhttp.onreadystatechange=function() {
  handleNewData();
}

window.requestAnimFrame = (function(callback){
  return window.requestAnimationFrame ||
  window.webkitRequestAnimationFrame ||
  window.mozRequestAnimationFrame ||
  window.oRequestAnimationFrame ||
  window.msRequestAnimationFrame ||
  function(callback){
    window.setTimeout(callback, 1000 / 60);
  };
})();

function handleNewData() {
  if (xmlhttp.readyState!=4 || xmlhttp.status!=200 || xmlhttp.status==null) {
    xmlReturned = true;
    return;
  }
  var statinfo = new Array(statName.length);
  for (j=0; j < statName.length; j++)
    statinfo[j] = xmlhttp.responseXML.getElementsByTagName(statName[j]);
  var deadinfo = xmlhttp.responseXML.getElementsByTagName('deadTabletServer');
  var badinfo = xmlhttp.responseXML.getElementsByTagName('badTabletServer');
  var idinfo = xmlhttp.responseXML.getElementsByTagName('server');
  
  var statValues = new Array(3);
  for (i=0; i < idinfo.length; i++) {
    var info = idinfo[i].attributes[0].nodeValue;
    var extra = '<br>';
    for (j=0; j < statinfo.length; j++) {
      statValues[j] = Math.floor(significance[j]*parseFloat(statinfo[j][i].childNodes[0].nodeValue))/significance[j];
      if (maxStatValue[j] < statValues[j])
        maxStatValue[j] = statValues[j];
      extra = extra + ' ' + statName[j] + ': ' + statValues[j];
    }
    setDotInfo(statValues[colorStatType],statValues[speedStatType],info,extra,i);
  }
  
  for (i=idinfo.length,j=0; j < deadinfo.length; i++,j++) {
    setDotInfo(-1,-1,deadinfo[j].attributes[0].nodeValue,'',i);
  }
  for (i=idinfo.length+deadinfo.length,j=0; j < badinfo.length; i++,j++) {
    setDotInfo(-1,-1,badinfo[j].attributes[0].nodeValue,'',i);
  }
  if (numDots != idinfo.length + deadinfo.length + badinfo.length)
    drawGrid();
  numDots = idinfo.length + deadinfo.length + badinfo.length;
  xmlReturned = true;
}

function setDotInfo(color,rate,id,extra,index) {
  if (maxObservedColor < color) {
    maxObservedColor = color;
  }
  if (maxObservedSpeed < rate) {
    maxObservedSpeed = rate;
  }
  if (index >= colors.length) {
    colors.push(color);
    speed.push(rate);
    ids.push(id);
    extras.push(extra);
    dotSize.push(maxDotRadius);
    dotSizeGrowing.push(false);
  } else {
    colors[index] = color;
    speed[index] = rate;
    ids[index] = id;
    extras[index] = extra;
    // keep existing size and direction
  }
}

function drawDots(){
  requestAnimFrame(drawDots);
  if (xmlReturned == true) {
    xmlReturned = false;
    xmlhttp.open('POST',xmlurl,true);
    xmlhttp.send();
  }
  
  frame++;
  
  var width = Math.ceil(Math.sqrt(numDots));
  var height = Math.ceil(numDots/width);
  var x;
  var y;
  for (i=0; i < numDots; i++) {
    if (Math.floor(dotSize[i]) > maxDotRadius) {
      // check for resize by the user
      dotSize[i] = maxDotRadius;
    } else if (speed[i]<=0) {
      // if not changing size, increase to max radius
      if (dotSize[i] < maxDotRadius)
        dotSize[i] = dotSize[i] + 1;
      if (dotSize[i] > maxDotRadius)
        dotSize[i] = maxDotRadius;
    } else {
      if (dotSizeGrowing[i]) {
        dotSize[i] = dotSize[i] + speed[i]/maxObservedSpeed;
        if (dotSize[i] + speed[i]/maxObservedSpeed > maxDotRadius) {
          dotSizeGrowing[i] = false;
        }
      }
      else {
        dotSize[i] = dotSize[i] - speed[i]/maxObservedSpeed;
        if (dotSize[i] - speed[i]/maxObservedSpeed < minDotRadius) {
          dotSizeGrowing[i] = true;
        }
      }
    }
    x = i % width;
    y = Math.floor(i / width);
    if (colors[i]==-1)
      strokeDot(x,y,maxDotRadius-1,deadColor);
    else
      drawDot(x,y,Math.floor(dotSize[i]),getColor(colors[i]));
  }
  if (mousedDot < numDots)
    document.getElementById('vishoverinfo').innerHTML=ids[mousedDot]+extras[mousedDot];
}

// fill in a few grey dots
function drawGrid() {
  context.clearRect(0, 0, canvas.width, canvas.height);
  for (i=0,k=0; i < canvas.width; i+=dotSpacing*2,k++) {
    for (j=0,l=0; j < canvas.height; j+=dotSpacing*2,l++) {
      drawDot(k,l,maxDotRadius,nullColor);
    }
  }
}

// fill a dot specified by indices into dot grid
function drawDot(i,j,r,c) {
  x = i*dotSpacing*2 + dotSpacing;
  y = j*dotSpacing*2 + dotSpacing;
  context.clearRect(x-dotSpacing, y-dotSpacing, dotSpacing*2, dotSpacing*2);
  if (useCircles)
    fillCircle(x,y,r-dotPadding,c);
  else
    fillSquare(x-r,y-r,(r-dotPadding)*2,c);
}

// stroke a dot specified by indices into dot grid
function strokeDot(i,j,r,c) {
  x = i*dotSpacing*2 + dotSpacing;
  y = j*dotSpacing*2 + dotSpacing;
  context.clearRect(x-dotSpacing, y-dotSpacing, dotSpacing*2, dotSpacing*2);
  if (useCircles)
    strokeCircle(x,y,r-dotPadding,c);
  else
    strokeSquare(x-r,y-r,(r-dotPadding)*2,c);
}

// translate color between 0 and maxObservedColor into an html color code
function getColor(c) {
  return colorPalette[Math.round((colorPalette.length-1)*c/maxObservedColor)];
}

function strokeCircle(x,y,r,c) {
  context.strokeStyle = c;
  context.lineWidth = 2;
  context.beginPath();
  context.arc(x,y,r,0,Math.PI*2,true);
  context.closePath();
  context.stroke();
}

function fillCircle(x,y,r,c) {
  context.fillStyle = c;
  context.beginPath();
  context.arc(x,y,r,0,Math.PI*2,true);
  context.closePath();
  context.fill();
}

function strokeSquare(x,y,d,c) {
  context.strokeStyle = c;
  context.lineWidth = 2;
  context.strokeRect(x,y,d,d);
}

function fillSquare(x,y,d,c) {
  context.fillStyle = c;
  context.fillRect(x,y,d,d);
}

// callback for shape selection
function setShape(obj) {
  switch (obj.selectedIndex) {
    case 0:
      useCircles = true;
      break;
    case 1:
      useCircles = false;
      break;
    default:
      useCircles = true;
  }
  drawGrid();
  setState();
}

// callback for size selection
function setSize(obj) {
  switch (obj.selectedIndex) {
    case 0:
      dotSpacing = 5;
      minDotRadius = 1;
      break;
    case 1:
      dotSpacing = 10;
      minDotRadius = 3;
      break;
    case 2:
      dotSpacing = 20;
      minDotRadius = 5;
      break;
    case 3:
      dotSpacing = 40;
      minDotRadius = 7;
      break;
    default:
      dotSpacing = 10;
      minDotRadius = 3;
  }
  maxDotRadius = dotSpacing - dotPadding;
  drawGrid();
  setState();
}

// callback for motion selection
function setMotion(obj) {
  speedStatType = obj.selectedIndex;
  maxObservedSpeed = maxStatValue[speedStatType];
  drawGrid();
  setState();
}

// callback for color selection
function setColor(obj) {
  colorStatType = obj.selectedIndex;
  maxObservedColor = maxStatValue[colorStatType];
  drawGrid();
  setState();
}

// hide server info on mouseout
function hideId(e) {
  document.getElementById('vishoverinfo').style.visibility='hidden';
}

// display server info on mouseover
function showId(e) {
  var x;
  var y;
  if (e.pageX || e.pageY) {
    x = e.pageX + main.scrollLeft;
    y = e.pageY + main.scrollTop;
  }
  else {
    // clientX and clientY unimplemented
    return;
  }
  var relx = x - canvas.offsetLeft - main.offsetLeft;
  var rely = y - canvas.offsetTop - main.offsetTop;
  var width = Math.ceil(Math.sqrt(numDots));
  mousedDot = Math.floor(relx/(dotSpacing*2)) + width*Math.floor(rely/(dotSpacing*2));
  if (relx < (width*dotSpacing*2) && mousedDot < numDots) {
    document.getElementById('vishoverinfo').style.left=relx+canvas.offsetLeft;
    document.getElementById('vishoverinfo').style.top=rely+canvas.offsetTop-40;
    document.getElementById('vishoverinfo').style.visibility='visible';
  }
  else {
    document.getElementById('vishoverinfo').style.visibility='hidden';
  }
}

function setState() {
  var url = visurl+'?shape='+(useCircles?'circles':'squares')+'&size='+(dotSpacing*2)+'&motion='+statName[speedStatType]+'&color='+statName[colorStatType];
  window.history.replaceState(window.history.state,'Server Activity',url);
}

// go to server page on click
function goToServer(e) {
  if (mousedDot < numDots)
    window.location = serverurl + ids[mousedDot];
}

window.onload = function() {
  drawGrid();
  drawDots();
}
</script>

